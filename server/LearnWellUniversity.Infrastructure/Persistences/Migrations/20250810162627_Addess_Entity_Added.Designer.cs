// <auto-generated />
using System;
using LearnWellUniversity.Infrastructure.Persistences;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace LearnWellUniversity.Infrastructure.Persistences.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250810162627_Addess_Entity_Added")]
    partial class Addess_Entity_Added
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("LearnWellUniversity.Domain.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("city");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("country");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Creator")
                        .HasColumnType("text")
                        .HasColumnName("creator");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_at");

                    b.Property<string>("Modifier")
                        .HasColumnType("text")
                        .HasColumnName("modifier");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("state");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("street");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("zip_code");

                    b.HasKey("Id")
                        .HasName("pk_addresses");

                    b.ToTable("addresses", (string)null);
                });

            modelBuilder.Entity("LearnWellUniversity.Domain.Entities.Class", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Creator")
                        .HasColumnType("text")
                        .HasColumnName("creator");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_at");

                    b.Property<string>("Modifier")
                        .HasColumnType("text")
                        .HasColumnName("modifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_classes");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("ix_classes_code");

                    b.ToTable("classes", (string)null);
                });

            modelBuilder.Entity("LearnWellUniversity.Domain.Entities.ClassSchedule", b =>
                {
                    b.Property<int>("ClassId")
                        .HasColumnType("integer")
                        .HasColumnName("class_id");

                    b.Property<int>("ScheduleId")
                        .HasColumnType("integer")
                        .HasColumnName("schedule_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Creator")
                        .HasColumnType("text")
                        .HasColumnName("creator");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_at");

                    b.Property<string>("Modifier")
                        .HasColumnType("text")
                        .HasColumnName("modifier");

                    b.HasKey("ClassId", "ScheduleId")
                        .HasName("pk_class_schedules");

                    b.HasIndex("ScheduleId")
                        .HasDatabaseName("ix_class_schedules_schedule_id");

                    b.ToTable("class_schedules", (string)null);
                });

            modelBuilder.Entity("LearnWellUniversity.Domain.Entities.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Creator")
                        .HasColumnType("text")
                        .HasColumnName("creator");

                    b.Property<decimal>("CreditHour")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(3, 2)
                        .HasColumnType("numeric(3,2)")
                        .HasDefaultValue(0m)
                        .HasColumnName("credit_hour");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_at");

                    b.Property<string>("Modifier")
                        .HasColumnType("text")
                        .HasColumnName("modifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_courses");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("ix_courses_code");

                    b.ToTable("courses", (string)null);
                });

            modelBuilder.Entity("LearnWellUniversity.Domain.Entities.CourseClass", b =>
                {
                    b.Property<int>("CourseId")
                        .HasColumnType("integer")
                        .HasColumnName("course_id");

                    b.Property<int>("ClassId")
                        .HasColumnType("integer")
                        .HasColumnName("class_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Creator")
                        .HasColumnType("text")
                        .HasColumnName("creator");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_at");

                    b.Property<string>("Modifier")
                        .HasColumnType("text")
                        .HasColumnName("modifier");

                    b.HasKey("CourseId", "ClassId")
                        .HasName("pk_course_classes");

                    b.HasIndex("ClassId")
                        .HasDatabaseName("ix_course_classes_class_id");

                    b.ToTable("course_classes", (string)null);
                });

            modelBuilder.Entity("LearnWellUniversity.Domain.Entities.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Creator")
                        .HasColumnType("text")
                        .HasColumnName("creator");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_at");

                    b.Property<string>("Modifier")
                        .HasColumnType("text")
                        .HasColumnName("modifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<int?>("ParentDepartmentId")
                        .HasColumnType("integer")
                        .HasColumnName("parent_department_id");

                    b.HasKey("Id")
                        .HasName("pk_departments");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("ix_departments_code");

                    b.HasIndex("ParentDepartmentId")
                        .HasDatabaseName("ix_departments_parent_department_id");

                    b.ToTable("departments", (string)null);
                });

            modelBuilder.Entity("LearnWellUniversity.Domain.Entities.Grading", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Creator")
                        .HasColumnType("text")
                        .HasColumnName("creator");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<decimal>("GradePoint")
                        .HasPrecision(3, 2)
                        .HasColumnType("numeric(3,2)")
                        .HasColumnName("grade_point");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<decimal>("MaxScore")
                        .HasPrecision(3, 2)
                        .HasColumnType("numeric(3,2)")
                        .HasColumnName("max_score");

                    b.Property<decimal>("MinScore")
                        .HasPrecision(3, 2)
                        .HasColumnType("numeric(3,2)")
                        .HasColumnName("min_score");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_at");

                    b.Property<string>("Modifier")
                        .HasColumnType("text")
                        .HasColumnName("modifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_gradings");

                    b.ToTable("gradings", (string)null);
                });

            modelBuilder.Entity("LearnWellUniversity.Domain.Entities.Schedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Creator")
                        .HasColumnType("text")
                        .HasColumnName("creator");

                    b.Property<string>("Day")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("day");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("interval")
                        .HasColumnName("end_time");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_at");

                    b.Property<string>("Modifier")
                        .HasColumnType("text")
                        .HasColumnName("modifier");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("interval")
                        .HasColumnName("start_time");

                    b.HasKey("Id")
                        .HasName("pk_schedules");

                    b.ToTable("schedules", (string)null);
                });

            modelBuilder.Entity("LearnWellUniversity.Domain.Entities.Securities.Resource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Creator")
                        .HasColumnType("text")
                        .HasColumnName("creator");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("display_name");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_at");

                    b.Property<string>("Modifier")
                        .HasColumnType("text")
                        .HasColumnName("modifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_resources");

                    b.ToTable("resources", (string)null);
                });

            modelBuilder.Entity("LearnWellUniversity.Domain.Entities.Securities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Creator")
                        .HasColumnType("text")
                        .HasColumnName("creator");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text")
                        .HasColumnName("display_name");

                    b.Property<bool>("IsStatic")
                        .HasColumnType("boolean")
                        .HasColumnName("is_static");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_at");

                    b.Property<string>("Modifier")
                        .HasColumnType("text")
                        .HasColumnName("modifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_roles");

                    b.ToTable("roles", (string)null);
                });

            modelBuilder.Entity("LearnWellUniversity.Domain.Entities.Securities.RoleResource", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.Property<int>("ResourceId")
                        .HasColumnType("integer")
                        .HasColumnName("resource_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Creator")
                        .HasColumnType("text")
                        .HasColumnName("creator");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_at");

                    b.Property<string>("Modifier")
                        .HasColumnType("text")
                        .HasColumnName("modifier");

                    b.HasKey("RoleId", "ResourceId")
                        .HasName("pk_role_resources");

                    b.HasIndex("ResourceId")
                        .HasDatabaseName("ix_role_resources_resource_id");

                    b.ToTable("role_resources", (string)null);
                });

            modelBuilder.Entity("LearnWellUniversity.Domain.Entities.Securities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Creator")
                        .HasColumnType("text")
                        .HasColumnName("creator");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("first_name");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("text")
                        .HasColumnName("full_name")
                        .HasComputedColumnSql("first_name || ' ' || last_name", true);

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsEmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("is_email_confirmed");

                    b.Property<bool>("IsPasswordChangeOnFirstLogin")
                        .HasColumnType("boolean")
                        .HasColumnName("is_password_change_on_first_login");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("last_name");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_at");

                    b.Property<string>("Modifier")
                        .HasColumnType("text")
                        .HasColumnName("modifier");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("password_hash");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("password_salt");

                    b.Property<string>("Phone")
                        .HasColumnType("text")
                        .HasColumnName("phone");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("LearnWellUniversity.Domain.Entities.Securities.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Creator")
                        .HasColumnType("text")
                        .HasColumnName("creator");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_at");

                    b.Property<string>("Modifier")
                        .HasColumnType("text")
                        .HasColumnName("modifier");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_user_roles");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_user_roles_role_id");

                    b.ToTable("user_roles", (string)null);
                });

            modelBuilder.Entity("LearnWellUniversity.Domain.Entities.Staff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Creator")
                        .HasColumnType("text")
                        .HasColumnName("creator");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_of_birth");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("integer")
                        .HasColumnName("department_id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("first_name");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("text")
                        .HasColumnName("full_name")
                        .HasComputedColumnSql("first_name || ' ' || last_name", true);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("last_name");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_at");

                    b.Property<string>("Modifier")
                        .HasColumnType("text")
                        .HasColumnName("modifier");

                    b.Property<int?>("PermanentAddressId")
                        .HasColumnType("integer")
                        .HasColumnName("permanent_address_id");

                    b.Property<string>("Phone")
                        .HasColumnType("text")
                        .HasColumnName("phone");

                    b.Property<string>("Position")
                        .HasColumnType("text")
                        .HasColumnName("position");

                    b.Property<int?>("PresentAddressId")
                        .HasColumnType("integer")
                        .HasColumnName("present_address_id");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_staffs");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("ix_staffs_code");

                    b.HasIndex("DepartmentId")
                        .HasDatabaseName("ix_staffs_department_id");

                    b.HasIndex("PermanentAddressId")
                        .HasDatabaseName("ix_staffs_permanent_address_id");

                    b.HasIndex("PresentAddressId")
                        .HasDatabaseName("ix_staffs_present_address_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_staffs_user_id");

                    b.ToTable("staffs", (string)null);
                });

            modelBuilder.Entity("LearnWellUniversity.Domain.Entities.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AcademicLevel")
                        .HasColumnType("integer")
                        .HasColumnName("academic_level");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Creator")
                        .HasColumnType("text")
                        .HasColumnName("creator");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_of_birth");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("integer")
                        .HasColumnName("department_id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<DateTime?>("EnrollmentDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("enrollment_date");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("first_name");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("text")
                        .HasColumnName("full_name")
                        .HasComputedColumnSql("first_name || ' ' || last_name", true);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("last_name");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_at");

                    b.Property<string>("Modifier")
                        .HasColumnType("text")
                        .HasColumnName("modifier");

                    b.Property<int?>("PermanentAddressId")
                        .HasColumnType("integer")
                        .HasColumnName("permanent_address_id");

                    b.Property<string>("Phone")
                        .HasColumnType("text")
                        .HasColumnName("phone");

                    b.Property<int?>("PresentAddressId")
                        .HasColumnType("integer")
                        .HasColumnName("present_address_id");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_students");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("ix_students_code");

                    b.HasIndex("DepartmentId")
                        .HasDatabaseName("ix_students_department_id");

                    b.HasIndex("PermanentAddressId")
                        .HasDatabaseName("ix_students_permanent_address_id");

                    b.HasIndex("PresentAddressId")
                        .HasDatabaseName("ix_students_present_address_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_students_user_id");

                    b.ToTable("students", (string)null);
                });

            modelBuilder.Entity("LearnWellUniversity.Domain.Entities.StudentClass", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("integer")
                        .HasColumnName("student_id");

                    b.Property<int>("ClassId")
                        .HasColumnType("integer")
                        .HasColumnName("class_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Creator")
                        .HasColumnType("text")
                        .HasColumnName("creator");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_at");

                    b.Property<string>("Modifier")
                        .HasColumnType("text")
                        .HasColumnName("modifier");

                    b.HasKey("StudentId", "ClassId")
                        .HasName("pk_student_classes");

                    b.HasIndex("ClassId")
                        .HasDatabaseName("ix_student_classes_class_id");

                    b.ToTable("student_classes", (string)null);
                });

            modelBuilder.Entity("LearnWellUniversity.Domain.Entities.StudentCourse", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("integer")
                        .HasColumnName("student_id");

                    b.Property<int>("CourseId")
                        .HasColumnType("integer")
                        .HasColumnName("course_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Creator")
                        .HasColumnType("text")
                        .HasColumnName("creator");

                    b.Property<DateTime?>("EnrollmentDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("enrollment_date");

                    b.Property<int?>("GradingId")
                        .HasColumnType("integer")
                        .HasColumnName("grading_id");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_at");

                    b.Property<string>("Modifier")
                        .HasColumnType("text")
                        .HasColumnName("modifier");

                    b.Property<decimal?>("Score")
                        .HasPrecision(3, 2)
                        .HasColumnType("numeric(3,2)")
                        .HasColumnName("score");

                    b.HasKey("StudentId", "CourseId")
                        .HasName("pk_student_courses");

                    b.HasIndex("CourseId")
                        .HasDatabaseName("ix_student_courses_course_id");

                    b.HasIndex("GradingId")
                        .HasDatabaseName("ix_student_courses_grading_id");

                    b.ToTable("student_courses", (string)null);
                });

            modelBuilder.Entity("LearnWellUniversity.Domain.Entities.ClassSchedule", b =>
                {
                    b.HasOne("LearnWellUniversity.Domain.Entities.Class", "Class")
                        .WithMany("ClassSchedules")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_class_schedules_classes_class_id");

                    b.HasOne("LearnWellUniversity.Domain.Entities.Schedule", "Schedule")
                        .WithMany("ClassSchedules")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_class_schedules_schedules_schedule_id");

                    b.Navigation("Class");

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("LearnWellUniversity.Domain.Entities.CourseClass", b =>
                {
                    b.HasOne("LearnWellUniversity.Domain.Entities.Class", "Class")
                        .WithMany("CourseClasses")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_course_classes_classes_class_id");

                    b.HasOne("LearnWellUniversity.Domain.Entities.Course", "Course")
                        .WithMany("CourseClasses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_course_classes_courses_course_id");

                    b.Navigation("Class");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("LearnWellUniversity.Domain.Entities.Department", b =>
                {
                    b.HasOne("LearnWellUniversity.Domain.Entities.Department", "ParentDepartment")
                        .WithMany()
                        .HasForeignKey("ParentDepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_departments_departments_parent_department_id");

                    b.Navigation("ParentDepartment");
                });

            modelBuilder.Entity("LearnWellUniversity.Domain.Entities.Securities.RoleResource", b =>
                {
                    b.HasOne("LearnWellUniversity.Domain.Entities.Securities.Resource", "Resource")
                        .WithMany("RoleResources")
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_role_resources_resources_resource_id");

                    b.HasOne("LearnWellUniversity.Domain.Entities.Securities.Role", "Role")
                        .WithMany("RoleResources")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_role_resources_roles_role_id");

                    b.Navigation("Resource");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("LearnWellUniversity.Domain.Entities.Securities.UserRole", b =>
                {
                    b.HasOne("LearnWellUniversity.Domain.Entities.Securities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_roles_roles_role_id");

                    b.HasOne("LearnWellUniversity.Domain.Entities.Securities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_roles_users_user_id");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LearnWellUniversity.Domain.Entities.Staff", b =>
                {
                    b.HasOne("LearnWellUniversity.Domain.Entities.Department", "Department")
                        .WithMany("Staffs")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_staffs_departments_department_id");

                    b.HasOne("LearnWellUniversity.Domain.Entities.Address", "PermanentAddress")
                        .WithMany()
                        .HasForeignKey("PermanentAddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_staffs_addresses_permanent_address_id");

                    b.HasOne("LearnWellUniversity.Domain.Entities.Address", "PresentAddress")
                        .WithMany()
                        .HasForeignKey("PresentAddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_staffs_addresses_present_address_id");

                    b.HasOne("LearnWellUniversity.Domain.Entities.Securities.User", "User")
                        .WithMany("Staffs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_staffs_users_user_id");

                    b.Navigation("Department");

                    b.Navigation("PermanentAddress");

                    b.Navigation("PresentAddress");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LearnWellUniversity.Domain.Entities.Student", b =>
                {
                    b.HasOne("LearnWellUniversity.Domain.Entities.Department", "Department")
                        .WithMany("Students")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_students_departments_department_id");

                    b.HasOne("LearnWellUniversity.Domain.Entities.Address", "PermanentAddress")
                        .WithMany()
                        .HasForeignKey("PermanentAddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_students_addresses_permanent_address_id");

                    b.HasOne("LearnWellUniversity.Domain.Entities.Address", "PresentAddress")
                        .WithMany()
                        .HasForeignKey("PresentAddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_students_addresses_present_address_id");

                    b.HasOne("LearnWellUniversity.Domain.Entities.Securities.User", "User")
                        .WithMany("Students")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_students_users_user_id");

                    b.Navigation("Department");

                    b.Navigation("PermanentAddress");

                    b.Navigation("PresentAddress");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LearnWellUniversity.Domain.Entities.StudentClass", b =>
                {
                    b.HasOne("LearnWellUniversity.Domain.Entities.Class", "Class")
                        .WithMany("StudentClasses")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_student_classes_classes_class_id");

                    b.HasOne("LearnWellUniversity.Domain.Entities.Student", "Student")
                        .WithMany("StudentClasses")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_student_classes_students_student_id");

                    b.Navigation("Class");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("LearnWellUniversity.Domain.Entities.StudentCourse", b =>
                {
                    b.HasOne("LearnWellUniversity.Domain.Entities.Course", "Course")
                        .WithMany("StudentCourses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_student_courses_courses_course_id");

                    b.HasOne("LearnWellUniversity.Domain.Entities.Grading", "Grading")
                        .WithMany()
                        .HasForeignKey("GradingId")
                        .HasConstraintName("fk_student_courses_gradings_grading_id");

                    b.HasOne("LearnWellUniversity.Domain.Entities.Student", "Student")
                        .WithMany("StudentCourses")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_student_courses_students_student_id");

                    b.Navigation("Course");

                    b.Navigation("Grading");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("LearnWellUniversity.Domain.Entities.Class", b =>
                {
                    b.Navigation("ClassSchedules");

                    b.Navigation("CourseClasses");

                    b.Navigation("StudentClasses");
                });

            modelBuilder.Entity("LearnWellUniversity.Domain.Entities.Course", b =>
                {
                    b.Navigation("CourseClasses");

                    b.Navigation("StudentCourses");
                });

            modelBuilder.Entity("LearnWellUniversity.Domain.Entities.Department", b =>
                {
                    b.Navigation("Staffs");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("LearnWellUniversity.Domain.Entities.Schedule", b =>
                {
                    b.Navigation("ClassSchedules");
                });

            modelBuilder.Entity("LearnWellUniversity.Domain.Entities.Securities.Resource", b =>
                {
                    b.Navigation("RoleResources");
                });

            modelBuilder.Entity("LearnWellUniversity.Domain.Entities.Securities.Role", b =>
                {
                    b.Navigation("RoleResources");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("LearnWellUniversity.Domain.Entities.Securities.User", b =>
                {
                    b.Navigation("Staffs");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("LearnWellUniversity.Domain.Entities.Student", b =>
                {
                    b.Navigation("StudentClasses");

                    b.Navigation("StudentCourses");
                });
#pragma warning restore 612, 618
        }
    }
}
